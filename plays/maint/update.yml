---
- name: Update host
  hosts: all
  become: true
  tasks:

    - name: "Update dnf repo and cache"
      ansible.builtin.dnf:
        update_cache: true
        update_only: true
      become: true
      when: ansible_facts.os_family == "RedHat"

    - name: "Upgrade all packages"
      ansible.builtin.dnf:
        name: "*"
        state: latest
        autoremove: true
      become: true
      when: ansible_facts.os_family == "RedHat"

    - name: "Update apt repo and cache"
      ansible.builtin.apt:
        update_cache: true
        force_apt_get: true
        cache_valid_time: 3600
      become: true
      when: ansible_facts.os_family == "Debian"

    - name: "Upgrade all packages"
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: true
      become: true
      become_user: root
      when: ansible_facts.os_family == "Debian"

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: true
      become: true
      when: ansible_facts.os_family == "Debian"

    - name: "Check if reboot is required"
      register: reboot_required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      become: true
      when: ansible_facts.os_family == "Debian"

    - name: "Reboot server"
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible. Reason: kernel updates"
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
      become: true
      when: (ansible_facts.os_family == "Debian") and (reboot_required.stat.exists)

    - name: "Check if reboot is required"
      register: rh_reboot_required
      ansible.builtin.command: needs-restarting -r
      ignore_errors: true
      failed_when: false
      become: true
      changed_when: (ansible_facts.os_family == "RedHat") and (rh_reboot_required.rc != 0)

    - name: "Reboot server for updates"
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible. Reason: kernel updates"
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
      become: true
      when: (ansible_facts.os_family == "RedHat") and (rh_reboot_required.rc != 0)

    - name: Check uptime
      ansible.builtin.shell: "uptime"
      register: Uptime
      become: true

    - ansible.builtin.debug: var=Uptime.stdout
